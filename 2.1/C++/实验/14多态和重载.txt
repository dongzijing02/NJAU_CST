14-1-1
#include<iostream>
using namespace std;
class rmb {
public:
	rmb(unsigned int d, unsigned int c);
	rmb operator+(rmb&);
	rmb operator++();
	void display() { cout << (yuan + jf / 100.0) << endl; }
protected:
	unsigned int yuan, jf;
};
rmb::rmb(unsigned int d, unsigned int c) {
	yuan = d; jf = c;
	while (jf >= 100) {
		yuan++;
		jf -= 100;
	}
}
rmb rmb::operator+(rmb& s) {
	unsigned int c = jf + s.jf;
	unsigned int d = yuan + s.yuan;
	return rmb(d, c);
}
rmb rmb::operator++() {
	jf++;
	if (jf >= 100) {
		jf -= 100;
		yuan++;
	}
	return *this;
}
int main() {
	rmb d1(1, 60);
	rmb d2(2, 50);
	rmb d3(0, 0);
	d3 = d1 + d2;
	++d3;
	d3.display();
	return 0;
}
14-1-2
#include<iostream>
#include<String.h>
using namespace std;
class String {
	char name[256];
public:
	String(const char* str) { strcpy(name, str); }
	String() {}
	~String() {}
	String operator +(const String&);
	void display() { cout << "字符串是：" << name << endl; }
};
static char* str;
String String::operator+(const String& a) {
	strcpy(str, name);
	strcat(str, a.name);
	return String(str);
}
void main() {
	str = new char[256];
	String demo1("visual c++");
	String demo2("6.0");
	demo1.display();
	demo2.display();
	String demo3 = demo1 + demo2;
	demo3.display();
	String demo4 = demo3 + "programming";
	demo4.display();
	delete str;

}
14-1-3
#include<iostream>
using namespace std;
class rmb {
	int yuan, jf;
public:
	rmb(int d, int c);
	friend rmb operator + (rmb&, rmb&);
	friend rmb& operator++(rmb&);
	void display() { cout << (yuan + jf / 100.0) << endl; }
};
rmb::rmb(int d, int c) {
	yuan = d; jf = c;
	while (jf >= 100) {
		yuan++;
		jf -= 100;
	}
}
rmb operator+(rmb& s1, rmb& s2) {
	int jf = s1.jf + s2.jf, yuan = s1.yuan + s2.yuan;
	return  rmb(yuan, jf);
}
rmb& operator++(rmb& s) {
	s.jf++;
	if (s.jf >= 100) {
		s.jf -= 100;
		s.yuan++;
	}
	return s;
}
int main(){
	return 0;
}
14-1-4
#include<iostream>
#include<String.h>
using namespace std;
class String {
	char name[256];
public:
	String(const char* str) { strcpy(name, str); }
	String() {}
	~String() {}
	friend String operator +(const String&, const String&);
	void display() { cout << "字符串是：" << name << endl; }
};
static char* str;
String operator+(const String& a, const String& b) {
	strcpy(str,a.name);
	strcat(str,b.name);
	return String(str);
}
void main() {
	str = new char[256];
	String demo1("visual c++");
	String demo2("6.0");
	demo1.display();
	demo2.display();
	String demo3 = demo1 + demo2;
	demo3.display();
	String demo4 = demo3 + "programming";
	demo4.display();
	String demo5 = "programming" + demo4;
	delete str;

}
14-1-5
#include<iostream>
using namespace std;
class complex {
	float real, imag;	// 复数的实部和虚部
public:
	complex(float r = 0, float i = 0) { real = r; imag = i; }
	void print();
	friend complex operator + (complex a, complex b);
	friend complex operator- (complex a, complex b);
	friend complex operator * (complex a, complex b);
	friend complex operator /(complex a, complex b);
};
void complex::print() {
	cout << real;
	if (imag > 0)cout << " +";
	if (imag != 0) cout << imag << " i\n";	// image小于0,则自带
}
complex operator + (complex a, complex b) {
	complex temp;
	temp.real = a.real + b.real;
	temp.imag = a.imag + b.imag;
	return temp;
}
complex operator - (complex a, complex b) {
	complex temp;
	temp.real = a.real - b.real;
	temp.imag = a.imag - b.imag;
	return temp;
}
complex operator * (complex a, complex b) {
	complex temp;
	temp.real = a.real*b.real - a.imag * b.imag;
	temp.imag = a.real * b.imag + a.imag * b.real;
	return temp;
}
complex operator/(complex a, complex b) {
	complex temp;
	float tt;
	tt = 1 / (b.real * b.real + b.imag * b.imag);
	temp.real = (a.real * b.real + a.imag * b.imag) * tt;
	temp.imag = (b.real * a.imag - a.real * b.imag) * tt;
	return temp;
}
void main() {
	complex c1(2.3, 4.6), c2(3.6, 2.8), c3;
	c1.print();
	c2.print();
	c3 = c1 + c2;
	c3.print();
	c3 = c1 - c2;
	c3.print();
	c3 = c1 * c2;
	c3.print();
	c3 = c1 / c2;
	c3.print();
}
14-1-6
#include <iostream>
#include <string.h>

using namespace std;
class Student {
	char name[10];
	float score[3];
	//静态成员sum表示参加计算的学生人数
	// 求每个学生的平均分
	static int sum;
public:
	void operator[] (Student&);
	Student(const char* na, float ma = 0, float en = 0, float ph = 0) {
		score[0] = ma; score[1] = en; score[2] = ph; strcpy(name, na);
	}
	void operator ! () {//求所有学生各门课的平均成绩
		if (sum > 0)
			cout << "mat:" << score[0] / sum << "eng:" << score[1] / sum << "phy:" << score[2] / sum;
	}
};
void Student::operator[](Student& s) {
	unsigned int i;
	float nt = 0;
	for (i = 0; i < 3; i++) {
		score[i] += s.score[i];		// 注意，此语句绝对不可以省略，这样 total 对象的 score 数组的各元素分别记录 3 个学生各门课成绩的总分
		nt += s.score[i];
	}
	cout << s.name << "		: " << nt / 3 << endl;
	sum++;		//参加计算的学生人数 +1

}
int Student::sum = 0;
void main(){
	int i;
	Student sa[] = { Student("Wang", 60, 70, 80),
					Student("Li",70, 80, 90),
					Student("Zhang", 50, 60, 70) }, total("Total");
	for (i = 0; i < 3; i++)
		total[sa[i]];//求每个学生的平均分,注意不能写成total[](sa[ij);或total[]sa[;
	!total;
	// 求所有学生各门课的平均成绩
}
14-1-7
#include<iostream>
using namespace std;
class Increase {
public:
	Increase(int x) :value(x) {}
	Increase& operator++();	//前自增
	Increase operator++(int);	//后自增
	void display() { cout << "the value is " << value << endl; }
private:
	int value;
};
Increase& Increase::operator++ () {
	value++; //先增量
	return *this;	//再返回原对象
}
Increase Increase::operator++(int) {
	Increase temp(*this);		// 临时对象存放原有对象值
	value++;					//原有对象增量修改
	return temp;				//返回原有对象值
}
void main() {
	Increase n(20);		
	n.display();
	(n++).display();		//显示临时对象值
	n.display();			//显示原有对象值
	++n;
	n.display();
	++(++n);
	n.display();
	(n++)++; // 第二次增量操作对临时对象进行
	n.display();
} 
14-1-8
#include<iostream>
using namespace std;
class Increase {
public:
	Increase(int x) :value(x) {}
	friend Increase& operator++(Increase&);	//前自增
	friend Increase operator++(Increase&,int);	//后自增
	void display() { cout << "the value is " << value << endl; }
private:
	int value;
};
Increase& operator++ (Increase& a) {
	a.value++; //先增量
	return a;	//再返回原对象
}
Increase operator++(Increase& a, int) {
	Increase temp(a);		// 临时对象存放原有对象值
	a.value++;					//原有对象增量修改
	return temp;				//返回原有对象值
}
void main() {
	Increase n(20);
	n.display();
	(n++).display();		//显示临时对象值
	n.display();			//显示原有对象值
	++n;
	n.display();
	++(++n);
	n.display();
	(n++)++; // 第二次增量操作对临时对象进行
	n.display();
}
14-1-9
#include < iostream>
using namespace std;
class pp {
public:
	int n;
	float m;
	pp* operator -> () { return this; }
};
void main() {
	pp t1;
	t1->m = 10;
	cout << "t1.m is:" << t1.m << endl;
	cout << "t1->m is" << t1->m << endl;
}
14-1-10
#include<iostream>
using namespace std;
class Sample {
	int n;
public:
	Sample() {}
	Sample(int i):n(i){}
	Sample & operator = (Sample);
	void disp() {
		cout << "n = " << n << endl;
	}
};
Sample& Sample:: operator = (Sample s) {
	Sample;; n = s.n;
	return *this;
}
void main() {
	Sample s1(10), s2;
	s2 = s1;
	s2.disp();
}
14-1-11
#include<iostream>
#include<string>
using namespace std;
class Person {
public:
	Person(const char* na) {
		cout << "call constructor" << endl;
		name = new char[strlen(na) + 1];	// 使用new 进行动态内存分
		if (name != 0)  strcpy(name, na);
	}
	Person(Person&p) {//深拷贝构造函数
		cout << "ca11 copy constructor" << endl;	//复制资源
		name = new char[strlen(p.name) + 1];
		if (name != 0)	strcpy(name, p.name);	//复制对象空间
	}
	void printname() { cout << name << end1; }
	~Person() { delete name; }
	void operator =(Person& p) {
		cout << "call operator override" << endl;
		name = new char[strlen(p.name) + 1];	// 复制资源
		if (name != 0)	strcpy(name, p.name);	// 复制对象空间
	}
private:
	char* name;
};				//类定义的结束
void main() {
	Person wang("wang");
	Person li(wang);		// 调用拷贝构造函数
	li = wang;//调用重载运算符函数
	li.printname();
	
}
14-1-12
#include<iostream>
#include<string>
using namespace std;
class Name {
	;
public:
	Name() { pName = 0; }
	Name(const char* pn) { copyName(pn); }
	~Name() { deleteName(); }
	Name& operator =(Name& s) {		//重载赋值运算符
		deleteName();
		copyName(s.pName);
		return *this;
	}
	void display() { cout << pName << endl; }
protected:
	void copyName(char* pN);
	void deleteName();
	char* pName;
};
void Name::copyName(char* pN) {
	pName = new char[strlen(pN) + 1];
	if (pName)	strcpy(pName, pN);
}
void Name::deleteName() {
	if (pName)
		delete pName,
		pName = 0;
}
void main() {
	Name s("Jone");
	Name t("temporary");
	t.display();
	t = s;	//对象赋值
	t.display();
}
14-1-13
#include<iostream>
#include<malloc.h>
using namespace std;
class Point {
	int x, y;
public:
	Point() {}
	Point(int l, int w) { x = l; y = w; }
	void disp() { cout << "面积:" << x * y << endl; }
	Point operator,(Point r) {
		Point temp;
		temp.x = r.x;
		temp.y = r.y;
		return temp;
	}
	Point operator + (Point r) {
		Point temp;
		temp.x = r.x + x;
		temp.y = r.y + y;
		return temp;
	}
};
void main() {
	Point r1(1, 2), r2(3, 4), r3(5, 6);
	r1.disp();
	r2.disp();
	r3.disp();
	r1 = (r1, r2 + r3, r3);
	r1.disp();
}





14-2
#include<iostream>
using namespace std;
class Matrix {      //定义Matrix类
public:
    int mat[50][50];
    static int m, n;
    Matrix(int x, int y);                    //默认构造函数
    friend Matrix operator +(Matrix a,Matrix b);
    Matrix operator -(Matrix b);
    friend Matrix operator *(Matrix a, Matrix b);
    Matrix operator /(Matrix b);
    void input();                                    //输入数据函数
    void display();                                  //输出数据函数
};
int Matrix::m = 2;
int Matrix::n = 2;
Matrix::Matrix(int x, int y) {                      //定义构造函数
    m = x; n = y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            mat[i][j] = 0;
}
//定义重载运算符"+"函数
Matrix operator+(Matrix a, Matrix b) {
    Matrix c(Matrix::m, Matrix::n);
    for (int i = 0; i < a.m; i++)
        for (int j = 0; j < a.n; j++)
            c.mat[i][j] = a.mat[i][j] + b.mat[i][j];
    return c;
}
//定义重载运算符"-"函数
Matrix Matrix::operator-(Matrix b) {
    Matrix c(Matrix::m, Matrix::n);
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            c.mat[i][j] = mat[i][j] - b.mat[i][j];
    return c;
}
//定义重载运算符"*"函数
Matrix operator*(Matrix a, Matrix b) {
    Matrix c(Matrix::m, Matrix::n);
    for (int i = 0; i < a.m; i++)
        for (int j = 0; j < a.n; j++)
            c.mat[i][j] = a.mat[i][j] * b.mat[i][j];
    return c;
}
//定义重载运算符"/"函数
Matrix Matrix::operator/(Matrix b) {
    Matrix c(Matrix::m, Matrix::n);
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            c.mat[i][j] = mat[i][j] / b.mat[i][j];
    return c;
}
void Matrix::input() {                              //定义输入数据函数
    cout << "input the value of matrix:" << endl;
    int i, j;
    for (i = 0; i < this->m; i++)
        for (j = 0; j < this->n; j++)
            cin >> mat[i][j];

}
void Matrix::display() {                           //定义输出数据函数
    for (int i = 0; i < this->m; i++) {
        for (int j = 0; j < this->n; j++)
            cout << mat[i][j] << " ";
        cout << endl;
    }
}
void main()
{
    cout << "Please input two dimensions of the matrix:  ";
    cin >> Matrix::m >> Matrix::n;
    Matrix a(Matrix::m, Matrix::n), b(Matrix::m, Matrix::n), c(Matrix::m, Matrix::n);
    a.input();  b.input();
    cout << endl << "Matrix a:" << endl;  a.display();    cout << endl << "Matrix b:" << endl;  b.display();
    c = a + b;  cout << endl << "Matrix c = Matrix a + Matrix b :" << endl;  c.display();   //用重载运算符"+"实现两个矩阵相加
    c = a - b;  cout << endl << "Matrix c = Matrix a - Matrix b :" << endl;  c.display();   //用重载运算符"-"实现两个矩阵相减
    c = a * b;  cout << endl << "Matrix c = Matrix a * Matrix b :" << endl;  c.display();   //用重载运算符"*"实现两个矩阵相乘
    c = a / b;  cout << endl << "Matrix c = Matrix a / Matrix b :" << endl;  c.display();   //用重载运算符"/"实现两个矩阵相除
}

14-3
#include<iostream>
using namespace std;
class Rational {
    int m, n;   //分母和分子
public:
    Rational(int nn = 1, int mm = 1);
    friend  Rational  operator  +(Rational& a, Rational& b);      //加法
    friend  Rational  operator  -(Rational& a, Rational& b);      //减法
    friend  Rational  operator  *(Rational& a, Rational& b);      //乘法
    friend  Rational  operator  /(Rational& a, Rational& b);      //除法
    friend bool operator  ==(Rational&, Rational&);
    Rational  operator  -();//取反
    Rational& operator  ++();            //r=++r1
    Rational  operator  ++(int);            //r=r1++
    Rational& operator  --();             //r=--r1
    Rational  operator  --(int);             //r =r1--
    bool operator  <(Rational&);
    operator double();
    void simple();
    void print();
};
Rational::Rational(int nn, int mm) { n = nn;  m = (mm != 0) ? mm : 1; }
Rational operator +(Rational& A, Rational& B) { Rational C(A.n * B.m + A.m * A.n, A.m * B.m);  C.simple();  return C; }
Rational operator -(Rational& A, Rational& B) { Rational C(A.n * B.m - A.m * B.n, A.m * B.m);  C.simple();  return C; }
Rational operator *(Rational& A, Rational& B) { Rational C(A.n * B.n, A.m * B.m);  C.simple();  return C; }
Rational operator /(Rational& A, Rational& B) { Rational C(A.n * B.m, A.m * B.n);  C.simple();  return C; }
bool operator ==(Rational& a, Rational& b) { return double(a.n) / a.m == (double)b.n / b.m ? true : false; }
Rational Rational::operator -() { Rational C(-n, m);    C.simple();    return C; }
Rational& Rational::operator ++() { n = n + m;    return *this; }  //r=++r1;
Rational Rational::operator ++(int) { Rational C(n, m);  n += m;  return C; }  //r=r1++;
Rational& Rational::operator --() { n = n - m;  return *this; }  //r=--r1;
Rational Rational::operator --(int) { Rational C(n, m);  n -= m;  return C; }  //r=r1--;
bool Rational::operator <(Rational& a) { return double(n) / m > (double)a.n / a.m ? true : false; } //r1>r2
Rational::operator double() { return (double)n / m; }
void  Rational::simple() {
    int a = m, b = n, r = 0;
    if (m < n) { a = n;	b = m; }
    r = a % b;
    while (r != 0) { a = b;  b = r;  r = a % b; }
    n /= b;  m /= b;
}
void Rational::print() {
    simple();
    if (m < 0)		cout << "The value is " << -n << '/' << -m << endl;
    else		cout << "The value is " << n << '/' << m << endl;
}
void main() {
    Rational  A(1, 2), B(3, -4), C;    C = A + B;  C.print();    C = A - B;  C.print();    C = A * B;  C.print();    C = A / B;  C.print();
    C = -A;  C.print();    C = ++A;  A.print();  C.print();    C = A++;  A.print();  C.print();
    C = --B;  B.print();  C.print();    C = B--;  B.print();  C.print();
}

14-4
#include<iostream>
#include<String.h>
#include<math.h>
using namespace std;
class  CDate {
	int Year, Month, Day; //分别存放年、月、日
	static int format;  //用于确定采用哪种格式显示日期
	enum WeekName { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };
	enum { January, February, Mars, April, May, June, July, August, September, October, November, December };
public:
	CDate();
	CDate(const CDate& d);
	CDate(int y = 0, int m = 0, int d = 0) :Year(y), Month(m), Day(d) {}
	//void SetDate(int ,int ,int );
	//void GetDate(char *);
	inline void SetYear(int y);
	inline void SetMonth(int m);
	inline void SetDay(int d);
	inline int GetYear();
	inline int GetMonth();
	inline int GetDay();
	inline void ShowDate();
	char* GetWeekNameofDate(const CDate& d);
	char* GetMonthNameofDate(const CDate& d);
	bool IsLeapYear(int year);
	bool operator <(const CDate& d) const;
	bool operator <=(const CDate& d) const;
	bool operator >(const CDate& d) const;
	bool operator >=(const CDate& d) const;
	bool operator ==(const CDate& d) const;
	bool operator !=(const CDate& d) const; {return !(*this == d); }
	CDate& operator +(const CDate& d);
	CDate& operator -(const CDate& d);
	in operator +(int tday);
	void operator ++();
	void operator --();
	friend ostream& operator <<(ostream& out, const CDate& d);
	friend istream& operator >>(istream& in, CDate& d);
};

class  CTime {
	int Hour, Minute, Second; //分别存放时、分、秒
	static int format       //用于确定采用哪种制式显示时间
public:
	CTime()；
		CTime(const CTime& d)；
		CTime(int h = 0, int m = 0, int s = 0) :Hour(h), Minute(m), Second(s) {}
	//void SetTime(int ,int ,int );
	//void GetTime(char *);
	inline void SetHour(int h);
	inline void SetMinute(int m);
	inline void SetSecond(int s);
	inline int GetHour();
	inline int GetMinute();
	inline int GetSecond();
	inline void ShowTime();

	bool operator <(const CTime& t) const;
	bool operator <=(const CTime& t) const;
	bool operator >(const CTime& t) const;
	bool operator >=(const CTime& t) const;
	bool operator ==(const CTime& t) const;
	bool operator !=(const CTime& t) const;
	CTime& operator +(const CTime& t);
	CTime& operator -(const CTime& t);
	void operator ++();
	void operator --();
	friend ostream& operator <<(ostream& out, const CTime& t);
	friend istream& operator >>(istream& in, CTime& t);
};
int main() {

	return 0;
}
14-4
#include<iostream>
#include<String.h>
#include<math.h>
using namespace std;
class  CDate {
	int Year, Month, Day; //分别存放年、月、日
	//static int format;  //用于确定采用哪种格式显示日期
	enum WeekName { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };
	enum { January = 1, February, Mars, April, May, June, July, August, September, October, November, December };
public:
	CDate();
	CDate(const CDate& d);
	CDate(int y = 0, int m = 0, int d = 0) :Year(y), Month(m), Day(d) {}
	//void SetDate(int ,int ,int );
	//void GetDate(char *);
	inline void SetYear(int y) { Year = y; }
	inline void SetMonth(int m) { Month = m; }
	inline void SetDay(int d) { Day = d; }
	inline int GetYear() { return Year; }
	inline int GetMonth() { return Month; }
	inline int GetDay() { return Day; }
	inline void ShowDate() { cout << Year << "." << Month << "." << Day << endl; }
	char* GetWeekNameofDate(const CDate& d) {
		int month = d.Month, year = d.Year, day = d.Day;
		if (month == 1 || month == 2)	year--, month += 12;
		int c = year / 100, y = year - c * 100, week = (c / 4) - 2 * c + (y + y / 4) + (13 * (month + 1) / 5) + day - 1;
		while (week < 0) { week += 7; }	week %= 7;
		switch (week) {
		case Monday:cout << "Monday"; break;	case Tuesday:cout << "Tuesday"; break;
		case Wednesday:cout << "Wednesday"; break;	case Thursday:cout << "Thursday"; break;
		case Friday:cout << "Friday"; break;	case Saturday:cout << "Saturday"; break;
		case Sunday:cout << "Sunday"; break;
			cout << endl;
		}
	}
	char* GetMonthNameofDate(const CDate& d) {
		if (d.Month == January) cout << "January"; else if (d.Month == February)cout << "February"; else if (d.Month == Mars)cout << "Mars"; else if (d.Month == April)cout << "April";
		else if (d.Month == May)cout << "May"; else if (d.Month == June)cout << "June"; else if (d.Month == July)cout << "July"; else if (d.Month == August)cout << "August";
		else if (d.Month == September)cout << "September"; else if (d.Month == October)cout << "October"; else if (d.Month == November)cout << "November"; else cout << "December";
		cout << endl;
	}
	bool IsLeapYear(int year) { year = Year; if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) return true; else return false; }
	bool operator <(const CDate& d) const {
		if (Year < d.Year)	return true;
		else if (Year == d.Year) {
			if (Month < d.Month)  return true;
			else if (Month == d.Month) {
				if (Day < d.Day)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator <=(const CDate& d) const {
		if (Year <= d.Year)	return true;
		else if (Year == d.Year) {
			if (Month <= d.Month)  return true;
			else if (Month == d.Month) {
				if (Day <= d.Day)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator >(const CDate& d) const {
		if (Year > d.Year)	return true;
		else if (Year == d.Year) {
			if (Month > d.Month)  return true;
			else if (Month == d.Month) {
				if (Day > d.Day)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator >=(const CDate& d) const {
		if (Year >= d.Year)	return true;
		else if (Year == d.Year) {
			if (Month >= d.Month)  return true;
			else if (Month == d.Month) {
				if (Day >= d.Day)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator ==(const CDate& d) const {
		if (Year == d.Year && Month == d.Month && Day == d.Day)return true;
		else return false;
	}
	bool operator !=(const CDate& d) const {return !(*this == d); }
	CDate& operator +(const CDate& d) {	Year += d.Year; Month = +d.Month; Day += d.Day;	}
	CDate& operator -(const CDate& d) { Year -= d.Year; Month -= d.Month; Day -= d.Day; }
	int operator +(int tday);
	void operator ++();
	void operator --();
	//friend ostream& operator <<(ostream& out, const CDate& d);
	//friend istream& operator >>(istream& in, CDate& d);
};
class  CTime {
	int Hour, Minute, Second; //分别存放时、分、秒
	//static int format;      //用于确定采用哪种制式显示时间
public:
	CTime();
	CTime(const CTime& d);
	CTime(int h = 0, int m = 0, int s = 0) :Hour(h), Minute(m), Second(s) {}
	//void SetTime(int ,int ,int );
	//void GetTime(char *);
	inline void SetHour(int h) { Hour = h; }
	inline void SetMinute(int m) { Minute = m; }
	inline void SetSecond(int s) { Second = s; }
	inline int GetHour() { return Hour; }
	inline int GetMinute() { return Minute; }
	inline int GetSecond() { return Second;  }
	inline void ShowTime() { cout << Hour << ":" << Minute << ":" << Second << endl; }
	bool operator <(const CTime& t) const {
		if (Hour < t.Hour)	return true;
		else if (Hour == t.Hour) {
			if (Minute < t.Minute)  return true;
			else if (Minute == t.Minute) {
				if (Second < t.Second)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator <=(const CTime& t) const {
		if (Hour <= t.Hour)	return true;
		else if (Hour == t.Hour) {
			if (Minute <= t.Minute)  return true;
			else if (Minute == t.Minute) {
				if (Second <= t.Second)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator >(const CTime& t) const {
		if (Hour > t.Hour)	return true;
		else if (Hour == t.Hour) {
			if (Minute > t.Minute)  return true;
			else if (Minute == t.Minute) {
				if (Second > t.Second)  return true;
				else  return false;
			}
			else return false;
		}
		else return false;
	}
	bool operator ==(const CTime& t) const {
		if (Hour == t.Hour && Minute == t.Minute && Second == t.Second)	return true;
		else  return false;
	}
	bool operator !=(const CTime& t) const { return (*this) == t; }
	CTime& operator +(const CTime& t) { Hour += t.Hour; Minute += t.Minute; Second += t.Second; }
	CTime& operator -(const CTime& t) { Hour -= t.Hour; Minute -= t.Minute; Second -= t.Second; }
	void operator ++() { Hour += 1; Minute += 1; Second += 1; }
	void operator --() { Hour -= 1; Minute -= 1; Second -= 1; }
	//friend ostream& operator <<(ostream& out, const CTime& t);
	//friend istream& operator >>(istream& in, CTime& t);
};
class Time:public CDate,public CTime {
public:
	Time(int y, int m1, int d, int h, int m2, int s) :CDate(y, m1, d), CTime(h, m2, s) {}
};
int main() {
	Time t(2023, 12, 10, 18, 24, 27);
	t.ShowDate(); t.ShowTime();
	return 0;
}




