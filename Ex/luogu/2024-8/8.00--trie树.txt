//trie树模板
//trie树一般只进行查找和插入
#include<bits/stdc++.h>
using namespace std;
int n, m, msize;
struct trie {
    int nex[100000][26], cnt;
    bool exist[100000];  // 该结点结尾的字符串是否存在

    void insert(string s, int l) {  // 插入字符串
        int p = 0;
        for (int i = 0; i < l; i++) {
            int c = s[i] - 'a';
            if (!nex[p][c])
                nex[p][c] = ++cnt;  // 如果没有，就添加结点
            p = nex[p][c];
        }
        exist[p] = 1;
    }

    bool find(string s, int l) {  // 查找字符串
        int p = 0;
        for (int i = 0; i < l; i++) {
            int c = s[i] - 'a';
            if (!nex[p][c]) return 0;
            p = nex[p][c];
        }
        return exist[p];
    }
};
trie tr;
int main() {
    tr.insert("you", 3);
    tr.insert("must", 4);
    tr.insert("why", 3);
    tr.insert("yougrt", 6);
    tr.find("you", 3);
    return 0;
}