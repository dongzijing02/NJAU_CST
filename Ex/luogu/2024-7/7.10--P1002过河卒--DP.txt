//对初始数组的调整，即32行set_point函数为重点，判定x，y的位置再进行set
#include <bits/stdc++.h>
using namespace std;
void test(long long x1, long long y1, long long a[][25])
{
    for (long long i = 0; i <= x1; i++)
    {
        for (long long j = 0; j <= y1; j++)
        {
            cout << a[i][j] << "\t";
        }
        cout << endl;
    }
    cout << "#########################################################" << endl;
}
void init(long long x1, long long y1, long long a[][25])
{
    for (long long i = 0; i <= x1; i++)
    {
        if (a[i][0] == -1)
            break;
        a[i][0] = 1;
    } // test(x1,y1,a);

    for (long long i = 0; i <= y1; i++)
    {
        if (a[0][i] == -1)
            break;
        a[0][i] = 1;
    } // test(x1,y1,a);
}
void set_point(long long x2, long long y2, long long a[][25])
{
    a[x2][y2] = -1;
    if (x2 == 0 && y2 == 0)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
    }
    else if (x2 == 0 && y2 == 1)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    else if (x2 == 0 && y2 > 1 && y2 <= 20)
    {
        a[x2 + 1][y2 - 2] = -1;
        a[x2 + 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    else if (x2 == 1 && y2 == 0)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
    }
    else if (x2 == 1 && y2 == 1)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    else if (x2 == 1 && y2 > 1 && y2 <= 20)
    {
        a[x2 + 1][y2 - 2] = -1;
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 - 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    else if (x2 > 1 && y2 == 0)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 - 2][y2 + 1] = -1;
        a[x2 + 2][y2 + 1] = -1;
    }
    else if (x2 > 1 && y2 == 1)
    {
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 - 2][y2 + 1] = -1;
        a[x2 - 2][y2 - 1] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    else if (x2 > 1 && y2 > 1 && y2 <= 20)
    {
        a[x2 + 1][y2 - 2] = -1;
        a[x2 + 1][y2 + 2] = -1;
        a[x2 - 1][y2 - 2] = -1;
        a[x2 - 1][y2 + 2] = -1;
        a[x2 - 2][y2 + 1] = -1;
        a[x2 - 2][y2 - 1] = -1;
        a[x2 + 2][y2 + 1] = -1;
        a[x2 + 2][y2 - 1] = -1;
    }
    // for (long long i = -1; i < 2; i += 2)
    // {
    //     for (long long j = -2; j < 3; j += 4)
    //     {
    //         a[x2 + i][y2 + j] = -1;
    //         a[x2 + j][y2 + i] = -1;
    //     }
    // }
}
void count(long long x1, long long y1, long long a[][25])
{
    for (long long i = 1; i <= x1; i++)
    {
        for (long long j = 1; j <= y1; j++)
        {
            if (a[i][j] != -1)
            {
                if (a[i - 1][j] != -1 && a[i][j - 1] != -1)
                    a[i][j] = a[i - 1][j] + a[i][j - 1];
                else if (a[i - 1][j] == -1 && a[i][j - 1] != -1)
                    a[i][j] = a[i][j - 1];
                else if (a[i - 1][j] != -1 && a[i][j - 1] == -1)
                    a[i][j] = a[i - 1][j];
                else if (a[i - 1][j] == -1 && a[i][j - 1] == -1)
                    a[i][j] = 0;
            }
        }
    }
}
int main()
{
    long long x1, x2, y1, y2, a[25][25] = {0};
    cin >> x1 >> y1 >> x2 >> y2;
    set_point(x2, y2, a);
    // test(x1,y1,a);
    init(x1, y1, a);
    // test(x1,y1,a);
    for (long long i = 0; i < x1; i++)
    {
        for (long long j = 0; j < y1; j++)
        {
            count(x1, y1, a);
        }
    }
    // test(x1,y1,a);
    cout << a[x1][y1];
    return 0;
}