//正常计算
#include<stdio.h>
int main()
{
	float a[1005] = { 0 }, c[1005] = { 0 }, max = 1000001;
	double n, sum = 0; int h = 0, b[1005] = { 0 }, l = 0, k;
	scanf_s("%lf", &n);
	for (int i = 0; i < n; i++) {
		scanf_s("%f", &a[i]); c[i] = a[i];
	}

	float min = max;
	for (int j = 0; j < n; j++) {
		for (k = 0; k < n; k++) {
			if (min > c[k]) {
				min = c[k];	l = k;  //找出现存的最小值
			}
		}
		min = max; sum += c[l] * (n - 1 - j); c[l] = 1000002;    //总时间+=现存最小的*剩下的人，之后将这个最小值改到最大
		b[h++] = l + 1; 										//接水顺序，小的在前面
	}
	for (int i = 0; i < n; i++) {
		printf("%d ", b[i]);
	}
	printf("\n%.2lf", sum / n);
	return 0;
}
//贪心算法
//i从1开
#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
struct people {
	int time; int num;
}ps[1005];
bool cmp(people p1, people p2) {
	return p1.time < p2.time;
}
int main()
{
	int n; double sum = 0, ave = 0;
	cin >> n;
	for (int i = 1; i <= n; i++) {					//i从1开始时是因为后面排序没有0
		cin >> ps[i].time; ps[i].num = i;		
	}
	sort(ps+1, ps + n + 1, cmp);		
	for (int i = 1; i <= n; i++) {
		cout << ps[i].num << " ";
		sum += (n - i) * ps[i].time;				//若i从0开始此处为n-i-1
	}
	ave = 1.0 * sum / n;
	cout << endl; printf("%.2lf", ave);
	return 0;
}
//i从0开
#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
struct people {
	int time; int num;
}ps[1005];
bool cmp(people p1, people p2) {
	return p1.time < p2.time;
}
int main()
{
	int n; double sum = 0, ave = 0;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> ps[i].time; ps[i].num = i;
	}
	sort(ps, ps + n, cmp);
	for (int i = 0; i < n; i++) {
		cout << ps[i].num + 1<< " ";
		sum += (n - i - 1) * ps[i].time;
	}
	ave = 1.0 * sum / n;
	cout << endl; printf("%.2lf", ave);
	return 0;
}
