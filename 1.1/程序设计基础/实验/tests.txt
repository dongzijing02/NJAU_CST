test 1031
#include<stdio.h>
int main()
{
	//求555555的最大三位数约数
	/*
	int n = 555555,t,i;
	for (i = 100; i < 1000; i++) {
		if (n % i == 0) {
			t = i;
		}
	}
	printf("%d", t);
	*/

	//反转
	/*
	int n,sum=0;
	scanf_s("%d", &n);
	while (n > 0) {
		sum = sum * 10 + n % 10;
		n /= 10;
	}
	printf("%d", sum);
	*/

	/*用代码实现
	1	3	6	10	15	21
	2	5	9	14	20
	4	8	13	19
	7	12	18
	11	17
	16
	*/
	
	int n, j = 1, t;
	scanf_s("%d", &n);
	for (int i = 1; i <= n; i++) {
		t = j;
		for (int k = i + 1; k <= n + 1; k++) {
			printf("%d\t", t);
			t += k;
		}
		j += i;
		printf("\n");
	}
	
	return 0;
	
}

test 1121
// 1 如果一个正整数等于其各个数字的立方和，则该数称为阿姆斯特朗数(亦称为自恋性数)。如407=43+03+73就是一个阿姆斯特朗数。试编程求1000以内的所有阿姆斯特朗数。
#include<iostream>
#include<cstdio>
using namespace std;
int judge(int);
int main()
{
	int b[1005] = { 0 },cnt=0;
	for (int i = 0; i <= 1000; i++) {
		if (judge(i) == 1) {
			b[i] = 1;
		}
	}
	for (int i = 0; i <= 1000; i++) {
		if (b[i]==1) {
			cout << i<<"\t";
			cnt++;
			if (cnt % 5 == 0) {
				cout << endl;
			}
		}
	}
	return 0;
}
int judge(int n)
{
	int a[4] = { 0 }, sum = 0;
	for (int i = 0, t = n; i < 4 && t>0; i++, t /= 10) {
		a[i] = t % 10;
	}
	for (int i = 0; i < 4; i++) {
		sum += a[i] * a[i] * a[i];
	}
	if (sum == n) {
		return 1;
	}
	else {
		return 0;
	}
}

// 2 对数组A中的N(0<N<100)个整数从小到大进行连续编号，要求不能改变数组A中元素的顺序，且相同的整数要具有相同的编号。例如：    
A=(5，3，4，7，3，5，6)  则输出为：    (3，1，2，5，1，3，4)   
#include<iostream>
#include<stdlib.h>
#include<cstdio>
using namespace std;
int c[100000000] = { 0 };
int main()
{
	int a[105] = { 0 }, b[105] = { 0 }, n, t,cnt=1;
	cin >> n;
	for (int i = 0; i < n; i++) {
		a[i] = rand() % 10;
		//cin >> a[i];
		b[i] = a[i];
		cout  << a[i] << "\t";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n - 1; j++) {
			if (b[j] > b[j + 1]) {
				t = b[j]; b[j] = b[j + 1]; b[j + 1] = t;
			}
		}
	}
	for (int i = 0; i < n; i++) {
		cout << b[i] << "\t";
	}
	cout << endl;
	
	for (int i = 0,j=1; i < n&&j<=n; i++) {
		if (c[b[i]] == 0) {
			c[b[i]] = j;
			j++;
		}
		else if (c[b[i]] != 0) {
			c[b[i]] += 0;
		}
	}
	for (int i = 0; i < 100&&cnt<=n; i++) {
		cout  << c[a[i]] << "\t";
		cnt++;
	}
	return 0;
}
//3
#include<stdio.h>
int main()
{
	int a[100] = { 0 }, cnt = 0, pp = 0; char s[100], c;
	c = getchar();
	gets_s(s);
	for (int i = 0; s[i] != '\0'; i++) {
		if (s[i] == c) {
			a[i] = 1; cnt += 1; pp = 1;
		}
	}
	if (pp == 0) {
		printf("字符串中没有该字符");
	}
	else {
		printf("共有%d次\n", cnt);
		for (int i = 0; s[i] != '\0'; i++){
			if (a[i]!=0) {
			printf("%d\t", i+1); //i还是i+1看输入要是c输入后不加空格就是i+1；加空格就是i
			}
		}
	}
}

test 1219
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<cstdio>
#include<string.h>
#include<math.h>
#include<algorithm>
using namespace std;
int main()
{
	//1
	/*int a, n, f = 1, s = 0;
	cin >> a >> n;
	for (int i = 1; i <= n; i++) {
		int  h = a;
		for (int j = 1; j < i; j++) {
			h = h * 10 + a;
		}
		s = s + h * f;
		f = -f;
	}
	cout << s;*/
	//2
	/*void print();
	void paixu();
	void find();
	print(); cout << endl;
	paixu(); cout << endl;
	find(); cout << endl;*/
	//3
	void find_b(char s[]);
	void del(char s[], int, int);
	char s[100]; int n, m; 
	gets_s(s);
	cin >> n >> m;
	find_b(s); cout << endl;
	del(s, n, m); cout << endl;
	return 0;
}
//2
void print() {
	cout << "学号:19222126" << "\t" << "姓名：董自经" << "\t" << "专业班级：计科221";
}
void paixu() {
	int a[20] = { 0 }, k = 0, s = 19222126, t = 0;
	while (s) {
		a[k++] = s % 10;
		s /= 10;
	}
	for (int i = 0; i < k - 1; i++) {
		for (int j = 0; j < k - 1 - i; j++) {
			if (a[j] < a[j + 1]) {
				t = a[j]; a[j] = a[j + 1]; a[j + 1] = t;
			}
		}
	}
	cout << "最大的数是：";
	for (int i = 0; i < k; i++) {
		cout << a[i];
	}
}
void find() {
	cout << "完美数如下：" << endl;
	int a[5000] = { 0 };
	for (int i = 1; i < 10000; i++) {
		int s = 0, k = 0;
		for (int j = 1; j <= i / 2; j++) {
			if (i % j == 0) {
				a[k++] = j; s += j;
			}
		}
		if (s == i) {
			cout << i << " = ";
			for (int h = 0; h < k; h++) {
				if (h == k - 1) {
					cout << a[h];
				}
				else {
					cout << a[h] << "+";

				}
			}
			cout << endl;
		}
	
	}
}
//3
void find_b(char s[]) {
	int cnt = 0;
	for (int i = 0; s[i] != '\0'; i++) {
		if (s[i] == 32 && s[i + 1] == 'b') {
			cnt++;
		}
	}
	cout << "以'b'开头的单词有" << cnt << "个";
}
void del(char s[], int n, int m) {
	for (int i = n - 1; i<(int)strlen(s); i++) {
		s[i] = s[i + m];
	}
	puts(s);
}




